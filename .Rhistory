pivot_longer(-c(province_state,  country_region, Lat, Long), names_to = "Date", values_to = "death_cases") %>%
# adjust JHU dates back one day to reflect US time, more orless
mutate(Date = mdy(Date),province_state = ifelse(is.na(province_state), country_region, province_state),
country_region = case_when(
country_region == "Hong Kong SAR" ~ "Hong Kong",
country_region == "Iran (Islamic Republic of)" ~ "Iran",
country_region %in% c("Korea, South", "Republic of Korea") ~ "South Korea",
country_region == "Macao SAR" ~ "Macau",
country_region == "Russian Federation" ~ "Russia",
country_region == "Taipei and environs" ~ "Taiwan",
country_region == "Viet Nam" ~ "Vietnam",
country_region == "Republic of Moldova" ~ "Moldova",
country_region == "United Kingdom" ~ "UK",
country_region == "Congo (Kinshasa)" ~ "Congo",
country_region == "Taiwan*" ~ "Taiwan",
country_region == "China" ~ "China",
TRUE ~ country_region
)) %>%
arrange(country_region, province_state, as.character(Date)) %>%
as.data.table() #%>% write_csv("prepare_data/death.csv")
dt_recovered <- read_csv(jhu_url_recovered) %>%
rename(province_state = "Province/State", country_region = "Country/Region") %>%
pivot_longer(-c(province_state,  country_region, Lat, Long), names_to = "Date", values_to = "recovered_cases") %>%
# adjust JHU dates back one day to reflect US time, more orless
mutate(Date = mdy(Date),province_state = ifelse(is.na(province_state), country_region, province_state),
country_region = case_when(
country_region == "Hong Kong SAR" ~ "Hong Kong",
country_region == "Iran (Islamic Republic of)" ~ "Iran",
country_region %in% c("Korea, South", "Republic of Korea") ~ "South Korea",
country_region == "Macao SAR" ~ "Macau",
country_region == "Russian Federation" ~ "Russia",
country_region == "Taipei and environs" ~ "Taiwan",
country_region == "Viet Nam" ~ "Vietnam",
country_region == "Republic of Moldova" ~ "Moldova",
country_region == "United Kingdom" ~ "UK",
country_region == "Congo (Kinshasa)" ~ "Congo",
country_region == "Taiwan*" ~ "Taiwan",
country_region == "China" ~ "China",
TRUE ~ country_region
)) %>%
arrange(country_region, province_state, as.character(Date)) %>%
as.data.table() #%>% write_csv("prepare_data/recovered.csv")
dt <- read_csv(jhu_url_confirmed) %>%
rename(province_state = "Province/State", country_region = "Country/Region") %>%
pivot_longer(-c(province_state,  country_region, Lat, Long), names_to = "Date", values_to = "confirmed_cases") %>%
# adjust JHU dates back one day to reflect US time, more orless
mutate(Date = mdy(Date),
province_state = ifelse(is.na(province_state), country_region, province_state),
country_region = case_when(
country_region == "Hong Kong SAR" ~ "Hong Kong",
country_region == "Iran (Islamic Republic of)" ~ "Iran",
country_region %in% c("Korea, South", "Republic of Korea") ~ "South Korea",
country_region == "Macao SAR" ~ "Macau",
country_region == "Russian Federation" ~ "Russia",
country_region == "Taipei and environs" ~ "Taiwan",
country_region == "Viet Nam" ~ "Vietnam",
country_region == "Republic of Moldova" ~ "Moldova",
country_region == "United Kingdom" ~ "UK",
country_region == "Congo (Kinshasa)" ~ "Congo",
country_region == "Taiwan*" ~ "Taiwan",
country_region == "China" ~ "China",
TRUE ~ country_region
)) %>%
arrange(country_region, province_state, Date) %>%
left_join(pop, by =c("country_region" = "Country")) %>%
filter(!is.na(Population)) %>%
as.data.table() %>%
left_join(dt_death,by = c("province_state", "country_region", "Lat", "Long", "Date")) %>%
left_join(dt_recovered,by = c("province_state", "country_region", "Lat", "Long", "Date")) %>%
mutate(Date = as.Date(Date)) %>%
write_csv("data/dt.csv")
### this is original us_dt from JHU
us_pop <- fread("prepare_data/us_pop.csv") %>% select(state, population)
# ### this is from NYtimes
#
# us_dt <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")%>%
#   rename("confirmed_cases" = "cases", "death_cases" = "deaths", "Date" = "date") %>%
#   left_join(us_pop, by = "state") %>%
#   mutate(country_region = "US", recovered_cases = NA) %>%
#   select(country_region, state, population, Date, confirmed_cases, death_cases, recovered_cases) %>%
#   arrange(state, Date)
#### this is from JHU updated us county
us_county_confirmed <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv") %>%
group_by(Province_State) %>%
summarise_at(vars(ends_with("/20")), funs(sum)) %>%
pivot_longer(cols = ends_with("/20"), names_to = "Date", values_to = "confirmed_cases") %>%
select(Province_State,Date, confirmed_cases)%>%
filter(Province_State != "Recovered") %>%
mutate(Date = mdy(Date))
us_county_death <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv") %>%
group_by(Province_State) %>%
summarise_at(vars(ends_with("/20")), funs(sum)) %>%
pivot_longer(cols = ends_with("/20"), names_to = "Date", values_to = "death_cases") %>%
select(Province_State,Date, death_cases)%>%
filter(Province_State != "Recovered") %>%
mutate(Date = mdy(Date))
us_dt <- us_county_confirmed %>%
left_join(us_county_death, by = c("Province_State", "Date")) %>%
rename("state"="Province_State") %>%
left_join(us_pop, by = "state") %>%
mutate(recovered_cases = NA, country_region = "US", Date = as.character(Date))%>%
select(country_region, state, population, Date, confirmed_cases, death_cases, recovered_cases) %>%
arrange(state, Date)
au_pop <- fread("prepare_data/aus_pop.csv")
au_dt <-
dt %>%
filter(country_region == "Australia") %>%
left_join(au_pop, by = c("province_state" = "state")) %>%
rename("state" = "province_state") %>%
select(country_region, state, population, Date, confirmed_cases,  death_cases, recovered_cases) %>%
arrange(state, Date)
ch_pop <- fread("prepare_data/chn_pop.csv") %>%
mutate(Province = str_remove(Province, pattern = " Province| Municipality| Autonomous Region| Special Administrative Region"),
Population = str_remove_all(Population, pattern = ","),
Density = str_remove_all(Density, pattern = ",")) %>%
mutate(Province =
case_when(
Province == "Guangxi Zhuang" ~ "Guangxi",
Province == "Xinjiang Uyghur" ~ "Xinjiang",
Province == "Ningxia Hui" ~ "Ningxia",
TRUE ~ Province
),
Population = as.integer(Population),
Density = as.numeric(Density)) %>%
rename("population" = "Population")
ch_dt <-
dt %>%
filter(country_region == "China") %>%
select(-Population) %>%
left_join(ch_pop, by = c("province_state" = "Province")) %>%
rename("state" = "province_state")  %>%
select(country_region, state, population, Date, confirmed_cases,  death_cases, recovered_cases) %>%
arrange(state, Date)
detailed_country_dt <- rbind(au_dt, ch_dt, us_dt) %>%
write_csv("data/detailed_country_dt.csv")
# ### source https://www.r-bloggers.com/meet-tidycovid19-yet-another-covid-19-related-r-package/
# ### connect to https://www.acaps.org/covid19-government-measures-dataset
# remotes::install_github("joachim-gassen/tidycovid19")
library(tidycovid19)
acaps_npi <- download_acaps_npi_data() %>%
mutate(date_implemented = as.Date(date_implemented)) %>%
mutate(date_implemented = as.character(date_implemented)) %>%
rename("link" = "alternative_source") %>%
select(country, iso3c, category, measure, targeted_pop_group, comments, date_implemented, source, source_type, link) %>%
mutate(measure = case_when(
measure == "curfews" ~ "Curfews",
measure == "strengthening the public health system" ~ "Strengthening the public health system",
measure == "testing policy" ~ "Testing policy",
measure == "limit public gatherings" ~ "Limit public gatherings",
TRUE ~ measure))
category_npi <- acaps_npi %>%
distinct(category, measure) %>%
arrange(category, measure) %>%
mutate(category_final = case_when(
category == "Humanitarian exemption" ~ "HE - Humanitarian exemption",
category == "Lockdown" ~ "LD - Lockdown",
category == "Movement restrictions" ~ "MR - Movement restrictions",
category == "Public health measures" ~ "PH - Public health measures",
category == "Governance and socio-economic measures" ~ "SE - Governance and socio-economic measures",
category == "Social distancing" ~ "SD - Social distancing")) %>%
mutate(code = str_sub(category_final, start = 1L, end = 2L)) %>%
group_by(category) %>%
mutate(code = str_c(code, 1:n())) %>%
mutate(measure_final = str_c(code, measure, sep = " - "))
acaps_npi %>%
left_join(category_npi, by = c("category", "measure")) %>%
select(-c(category, measure)) %>%
write_csv("data/acaps_policy.csv")
# https://www.bsg.ox.ac.uk/research/research-projects/oxford-covid-19-government-response-tracker
## updated 31/03/2020 checked on 15th April 2020
## updated source to Github https://github.com/yurisong1/covid-policy-tracker
## Oxford stopped data collection and will return on 27th April 2020
oxford_policy_url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest_withnotes.csv"
oxford_dt <- read_csv(oxford_policy_url) %>%
# fread("prepare_data/OxCGRT_Download_200420_021439_Full.csv") %>%
select(-contains(c("Notes", "IsGeneral", "StringencyIndex", "Confirmed", "Flag"))) %>%
pivot_longer(cols = c(str_subset(colnames(.), pattern =  "[A-Z]{1}[0-9]{1}")), names_to = "variable", values_to = "value") %>%
mutate(vari = case_when(
variable == "C1_School closing" ~ "Sch",
variable == "C2_Workplace closing" ~ "Wrk",
variable == "C3_Cancel public events" ~ "PEv",
variable == "C4_Restrictions on gatherings" ~ "Gathr",
variable == "C5_Close public transport" ~ "PTran",
variable == "C6_Stay at home requirements" ~ "Hom",
variable == "C7_Restrictions on internal movement" ~ "Mov",
variable == "C8_International travel controls" ~ "ITrav",
variable == "E1_Income support" ~ "IncS",
variable == "E2_Debt/contract relief" ~ "Contr",
variable == "E3_Fiscal measures" ~ "Fisc",
variable == "E4_International support" ~ "IntS",
variable == "H1_Public information campaigns" ~ "PInfo",
variable == "H2_Testing policy" ~ "Test",
variable == "H3_Contact tracing" ~ "ContrT",
variable == "H4_Emergency investment in healthcare" ~ "InvH",
variable == "H5_Investment in vaccines" ~ "Vacc",
variable == "M1_Wildcard" ~ "Wild"),
Date = ymd(Date)) %>%
rename("Country" = "CountryName") %>%
mutate(value = ifelse(vari %in% c("Fisc", "Vacc", "IntS", "InvH"), si_vec(value), value)) %>%
write_csv("data/oxford_clean.csv")
#### interesting posts http://nrg.cs.ucl.ac.uk/mjh/covid19/
### testing data
## source https://github.com/owid/covid-19-data/tree/master/public/data/testing
testing_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/testing/covid-testing-all-observations.csv"
test_dt <- read_csv(testing_url) %>%
# only save "India - Sample tested"
filter(Entity != "India - people tested") %>%
separate(col = "Entity", into = c("Country", "Unit"), sep = " - ") %>%
arrange(Country, Date)  %>%
mutate(Country = case_when(
Country == "United Kingdom" ~ "UK",
Country == "United States" ~ "US",
Country == "Czech Republic" ~ "Czechia",
TRUE ~ Country)) %>%
group_by(Country, Date) %>%
summarise_at(vars("Cumulative total", "Daily change in cumulative total",
"Cumulative total per thousand", "Daily change in cumulative total per thousand"), sum, na.rm = TRUE) %>%
ungroup() %>%
filter(`Cumulative total` > 0) %>% # remove interrupted testing data
arrange(Country, Date) %>%
write_csv("data/testing.csv")
## check country name consistency
# unique(test_dt$Country)[!(unique(test_dt$Country)) %in% unique(dt$country_region)]
# jhu_mapping table
jhu_mapping_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
jhu_mapping_dt <- read_csv(jhu_mapping_url) %>%
write_csv("prepare_data/jhu_mapping_table.csv")
runApp()
shiny::runApp()
library(shiny)
library(shinyWidgets)
library(shinyjs)
library(tidyverse)
library(scales)
library(data.table)
library(lubridate)
library(ggrepel)
library(xml2)
library(bit64)
library(RCurl)
library(httr)
library(readxl)
library(wbstats)
library(DT)
library(fmsb)
pkgload::load_all(path= "GAlogger/")
theme_set(theme_minimal())
source("R/0. load_data_jhu.R")
source("R/1. functions.R")
### this is to process data
wp_region <- read_excel("prepare_data/reg_country_wiki.xlsx") %>%
mutate(Country = ifelse(Country == "Burma", "Myanmar", Country))
pop <- fread("prepare_data/world_pop.csv") %>%
mutate(Country = str_remove(Country, pattern = "\xca"),
Population = as.numeric(Population)) %>%
mutate(Country = str_remove(Country, '\\[.\\]$')) %>%
mutate(Country = case_when(
Country == "Mainland China" ~ "China",
Country == "Czech Republic" ~ "Czechia",
TRUE ~ Country
)) %>%
rename("pop_date"="Date") %>%
select(-pop_date) %>%
left_join(wp_region, by = c("Country")) %>%
write_csv("data/pop.csv")
# load population from wikipedia
# wikipedia_data_url <- "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
#
# outbreak_webpage <- read_html(wikipedia_data_url)
#
# # parse the web page and extract the data from the first
# # table
# provinces_confirmed <- outbreak_webpage %>% html_nodes("table") %>%
#   .[[1]] %>% html_table(fill = TRUE) %>% rename(Date = "Date (CST)")
# wp_region <- fread("data/reg_country.csv") %>%
#   rename("Global" = "Global South")
#### region <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv")
### github projec from JHU https://github.com/CSSEGISandData/COVID-19
jhu_url_confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
jhu_url_deaths <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
jhu_url_recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
# jhu_url_recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv"
dt_death <- read_csv(jhu_url_deaths) %>%
rename(province_state = "Province/State", country_region = "Country/Region") %>%
pivot_longer(-c(province_state,  country_region, Lat, Long), names_to = "Date", values_to = "death_cases") %>%
# adjust JHU dates back one day to reflect US time, more orless
mutate(Date = mdy(Date),province_state = ifelse(is.na(province_state), country_region, province_state),
country_region = case_when(
country_region == "Hong Kong SAR" ~ "Hong Kong",
country_region == "Iran (Islamic Republic of)" ~ "Iran",
country_region %in% c("Korea, South", "Republic of Korea") ~ "South Korea",
country_region == "Macao SAR" ~ "Macau",
country_region == "Russian Federation" ~ "Russia",
country_region == "Taipei and environs" ~ "Taiwan",
country_region == "Viet Nam" ~ "Vietnam",
country_region == "Republic of Moldova" ~ "Moldova",
country_region == "United Kingdom" ~ "UK",
country_region == "Congo (Kinshasa)" ~ "Congo",
country_region == "Taiwan*" ~ "Taiwan",
country_region == "China" ~ "China",
TRUE ~ country_region
)) %>%
arrange(country_region, province_state, as.character(Date)) %>%
as.data.table() #%>% write_csv("prepare_data/death.csv")
dt_recovered <- read_csv(jhu_url_recovered) %>%
rename(province_state = "Province/State", country_region = "Country/Region") %>%
pivot_longer(-c(province_state,  country_region, Lat, Long), names_to = "Date", values_to = "recovered_cases") %>%
# adjust JHU dates back one day to reflect US time, more orless
mutate(Date = mdy(Date),province_state = ifelse(is.na(province_state), country_region, province_state),
country_region = case_when(
country_region == "Hong Kong SAR" ~ "Hong Kong",
country_region == "Iran (Islamic Republic of)" ~ "Iran",
country_region %in% c("Korea, South", "Republic of Korea") ~ "South Korea",
country_region == "Macao SAR" ~ "Macau",
country_region == "Russian Federation" ~ "Russia",
country_region == "Taipei and environs" ~ "Taiwan",
country_region == "Viet Nam" ~ "Vietnam",
country_region == "Republic of Moldova" ~ "Moldova",
country_region == "United Kingdom" ~ "UK",
country_region == "Congo (Kinshasa)" ~ "Congo",
country_region == "Taiwan*" ~ "Taiwan",
country_region == "China" ~ "China",
TRUE ~ country_region
)) %>%
arrange(country_region, province_state, as.character(Date)) %>%
as.data.table() #%>% write_csv("prepare_data/recovered.csv")
dt <- read_csv(jhu_url_confirmed) %>%
rename(province_state = "Province/State", country_region = "Country/Region") %>%
pivot_longer(-c(province_state,  country_region, Lat, Long), names_to = "Date", values_to = "confirmed_cases") %>%
# adjust JHU dates back one day to reflect US time, more orless
mutate(Date = mdy(Date),
province_state = ifelse(is.na(province_state), country_region, province_state),
country_region = case_when(
country_region == "Hong Kong SAR" ~ "Hong Kong",
country_region == "Iran (Islamic Republic of)" ~ "Iran",
country_region %in% c("Korea, South", "Republic of Korea") ~ "South Korea",
country_region == "Macao SAR" ~ "Macau",
country_region == "Russian Federation" ~ "Russia",
country_region == "Taipei and environs" ~ "Taiwan",
country_region == "Viet Nam" ~ "Vietnam",
country_region == "Republic of Moldova" ~ "Moldova",
country_region == "United Kingdom" ~ "UK",
country_region == "Congo (Kinshasa)" ~ "Congo",
country_region == "Taiwan*" ~ "Taiwan",
country_region == "China" ~ "China",
TRUE ~ country_region
)) %>%
arrange(country_region, province_state, Date) %>%
left_join(pop, by =c("country_region" = "Country")) %>%
filter(!is.na(Population)) %>%
as.data.table() %>%
left_join(dt_death,by = c("province_state", "country_region", "Lat", "Long", "Date")) %>%
left_join(dt_recovered,by = c("province_state", "country_region", "Lat", "Long", "Date")) %>%
mutate(Date = as.Date(Date)) %>%
write_csv("data/dt.csv")
### this is original us_dt from JHU
us_pop <- fread("prepare_data/us_pop.csv") %>% select(state, population)
# ### this is from NYtimes
#
# us_dt <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")%>%
#   rename("confirmed_cases" = "cases", "death_cases" = "deaths", "Date" = "date") %>%
#   left_join(us_pop, by = "state") %>%
#   mutate(country_region = "US", recovered_cases = NA) %>%
#   select(country_region, state, population, Date, confirmed_cases, death_cases, recovered_cases) %>%
#   arrange(state, Date)
#### this is from JHU updated us county
us_county_confirmed <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv") %>%
group_by(Province_State) %>%
summarise_at(vars(ends_with("/20")), funs(sum)) %>%
pivot_longer(cols = ends_with("/20"), names_to = "Date", values_to = "confirmed_cases") %>%
select(Province_State,Date, confirmed_cases)%>%
filter(Province_State != "Recovered") %>%
mutate(Date = mdy(Date))
us_county_death <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv") %>%
group_by(Province_State) %>%
summarise_at(vars(ends_with("/20")), funs(sum)) %>%
pivot_longer(cols = ends_with("/20"), names_to = "Date", values_to = "death_cases") %>%
select(Province_State,Date, death_cases)%>%
filter(Province_State != "Recovered") %>%
mutate(Date = mdy(Date))
us_dt <- us_county_confirmed %>%
left_join(us_county_death, by = c("Province_State", "Date")) %>%
rename("state"="Province_State") %>%
left_join(us_pop, by = "state") %>%
mutate(recovered_cases = NA, country_region = "US", Date = as.character(Date))%>%
select(country_region, state, population, Date, confirmed_cases, death_cases, recovered_cases) %>%
arrange(state, Date)
au_pop <- fread("prepare_data/aus_pop.csv")
au_dt <-
dt %>%
filter(country_region == "Australia") %>%
left_join(au_pop, by = c("province_state" = "state")) %>%
rename("state" = "province_state") %>%
select(country_region, state, population, Date, confirmed_cases,  death_cases, recovered_cases) %>%
arrange(state, Date)
ch_pop <- fread("prepare_data/chn_pop.csv") %>%
mutate(Province = str_remove(Province, pattern = " Province| Municipality| Autonomous Region| Special Administrative Region"),
Population = str_remove_all(Population, pattern = ","),
Density = str_remove_all(Density, pattern = ",")) %>%
mutate(Province =
case_when(
Province == "Guangxi Zhuang" ~ "Guangxi",
Province == "Xinjiang Uyghur" ~ "Xinjiang",
Province == "Ningxia Hui" ~ "Ningxia",
TRUE ~ Province
),
Population = as.integer(Population),
Density = as.numeric(Density)) %>%
rename("population" = "Population")
ch_dt <-
dt %>%
filter(country_region == "China") %>%
select(-Population) %>%
left_join(ch_pop, by = c("province_state" = "Province")) %>%
rename("state" = "province_state")  %>%
select(country_region, state, population, Date, confirmed_cases,  death_cases, recovered_cases) %>%
arrange(state, Date)
detailed_country_dt <- rbind(au_dt, ch_dt, us_dt) %>%
write_csv("data/detailed_country_dt.csv")
# ### source https://www.r-bloggers.com/meet-tidycovid19-yet-another-covid-19-related-r-package/
# ### connect to https://www.acaps.org/covid19-government-measures-dataset
# remotes::install_github("joachim-gassen/tidycovid19")
library(tidycovid19)
acaps_npi <- download_acaps_npi_data() %>%
mutate(date_implemented = as.Date(date_implemented)) %>%
mutate(date_implemented = as.character(date_implemented)) %>%
rename("link" = "alternative_source") %>%
select(country, iso3c, category, measure, targeted_pop_group, comments, date_implemented, source, source_type, link) %>%
mutate(measure = case_when(
measure == "curfews" ~ "Curfews",
measure == "strengthening the public health system" ~ "Strengthening the public health system",
measure == "testing policy" ~ "Testing policy",
measure == "limit public gatherings" ~ "Limit public gatherings",
TRUE ~ measure))
category_npi <- acaps_npi %>%
distinct(category, measure) %>%
arrange(category, measure) %>%
mutate(category_final = case_when(
category == "Humanitarian exemption" ~ "HE - Humanitarian exemption",
category == "Lockdown" ~ "LD - Lockdown",
category == "Movement restrictions" ~ "MR - Movement restrictions",
category == "Public health measures" ~ "PH - Public health measures",
category == "Governance and socio-economic measures" ~ "SE - Governance and socio-economic measures",
category == "Social distancing" ~ "SD - Social distancing")) %>%
mutate(code = str_sub(category_final, start = 1L, end = 2L)) %>%
group_by(category) %>%
mutate(code = str_c(code, 1:n())) %>%
mutate(measure_final = str_c(code, measure, sep = " - "))
acaps_npi %>%
left_join(category_npi, by = c("category", "measure")) %>%
select(-c(category, measure)) %>%
write_csv("data/acaps_policy.csv")
# https://www.bsg.ox.ac.uk/research/research-projects/oxford-covid-19-government-response-tracker
## updated 31/03/2020 checked on 15th April 2020
## updated source to Github https://github.com/yurisong1/covid-policy-tracker
## Oxford stopped data collection and will return on 27th April 2020
oxford_policy_url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest_withnotes.csv"
oxford_dt <- read_csv(oxford_policy_url) %>%
# fread("prepare_data/OxCGRT_Download_200420_021439_Full.csv") %>%
select(-contains(c("Notes", "IsGeneral", "StringencyIndex", "Confirmed", "Flag"))) %>%
pivot_longer(cols = c(str_subset(colnames(.), pattern =  "[A-Z]{1}[0-9]{1}")), names_to = "variable", values_to = "value") %>%
mutate(vari = case_when(
variable == "C1_School closing" ~ "Sch",
variable == "C2_Workplace closing" ~ "Wrk",
variable == "C3_Cancel public events" ~ "PEv",
variable == "C4_Restrictions on gatherings" ~ "Gathr",
variable == "C5_Close public transport" ~ "PTran",
variable == "C6_Stay at home requirements" ~ "Hom",
variable == "C7_Restrictions on internal movement" ~ "Mov",
variable == "C8_International travel controls" ~ "ITrav",
variable == "E1_Income support" ~ "IncS",
variable == "E2_Debt/contract relief" ~ "Contr",
variable == "E3_Fiscal measures" ~ "Fisc",
variable == "E4_International support" ~ "IntS",
variable == "H1_Public information campaigns" ~ "PInfo",
variable == "H2_Testing policy" ~ "Test",
variable == "H3_Contact tracing" ~ "ContrT",
variable == "H4_Emergency investment in healthcare" ~ "InvH",
variable == "H5_Investment in vaccines" ~ "Vacc",
variable == "M1_Wildcard" ~ "Wild"),
Date = ymd(Date)) %>%
rename("Country" = "CountryName") %>%
mutate(value = ifelse(vari %in% c("Fisc", "Vacc", "IntS", "InvH"), si_vec(value), value)) %>%
write_csv("data/oxford_clean.csv")
#### interesting posts http://nrg.cs.ucl.ac.uk/mjh/covid19/
### testing data
## source https://github.com/owid/covid-19-data/tree/master/public/data/testing
testing_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/testing/covid-testing-all-observations.csv"
test_dt <- read_csv(testing_url) %>%
# only save "India - Sample tested"
filter(Entity != "India - people tested") %>%
separate(col = "Entity", into = c("Country", "Unit"), sep = " - ") %>%
arrange(Country, Date)  %>%
mutate(Country = case_when(
Country == "United Kingdom" ~ "UK",
Country == "United States" ~ "US",
Country == "Czech Republic" ~ "Czechia",
TRUE ~ Country)) %>%
group_by(Country, Date) %>%
summarise_at(vars("Cumulative total", "Daily change in cumulative total",
"Cumulative total per thousand", "Daily change in cumulative total per thousand"), sum, na.rm = TRUE) %>%
ungroup() %>%
filter(`Cumulative total` > 0) %>% # remove interrupted testing data
arrange(Country, Date) %>%
write_csv("data/testing.csv")
## check country name consistency
# unique(test_dt$Country)[!(unique(test_dt$Country)) %in% unique(dt$country_region)]
# jhu_mapping table
jhu_mapping_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
jhu_mapping_dt <- read_csv(jhu_mapping_url) %>%
write_csv("prepare_data/jhu_mapping_table.csv")
runApp()
