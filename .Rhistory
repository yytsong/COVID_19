labs (caption = str_c("\n","By: @behrooz_hm @yurisyt / Data: Tim Churches (UNSW) & John Hopkins University"),
x = "Days since the First Case Reported from each State") +
labs(title = str_c ("COVID-19 Cases @ ", Sys.time()," AEDT", "\n","(Y-axis is logged)"),
y = "Number of Reported Cases - Log Scale")+
scale_y_log10(labels = si_vec, breaks = c(0,5,10,50,100,250,500,1000,2500,5000, 10000,25000,50000,100000))
## s <- c("Victoria", "Queensland")
df <-
au_dt %>%
filter(state %in% s, cumulative_cases != 0) %>%
group_by(state) %>%
mutate(first_day = min(Date)) %>%
pivot_wider(names_from = "Date", values_from = "cumulative_cases") %>%
pivot_longer(cols = starts_with("2020-"), names_to = "Date", values_to = "cumulative_cases") %>%
arrange(state,Date) %>%
mutate(Date = as.Date(Date), passed_days = Date - first_day,
incident_cases = ifelse(is.na(lag(cumulative_cases)), cumulative_cases , cumulative_cases - lag(cumulative_cases))) %>%
ungroup() %>%
filter(passed_days >= 0)
df_new <- df %>%
filter(!is.nan(!!measure_s), !!measure_s>=0, !is.na(!!measure_s))
df_end <- df_new %>%
group_by(state) %>%
filter(Date == max(Date-1)) %>%
ungroup()
df_new %>%
ggplot(aes(x = passed_days, y = !!measure_s, group = state, color = state))+
geom_line()+
geom_point(size = 0.4)+
geom_text_repel(data = df_end, aes(label = state), size = 4, min.segment.length = 0)+
scale_x_continuous(limits = c(0, 50)) +
theme(legend.position = "none",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 17))+
scale_colour_manual(values = au_state_color)+
labs (caption = str_c("\n","By: @behrooz_hm @yurisyt / Data: Tim Churches (UNSW) & John Hopkins University"),
x = "Days since the First Case Reported from each State") +
labs(title = str_c ("COVID-19 Cases @ ", Sys.time()," AEDT", "\n","(Y-axis is logged)"),
y = "Number of Reported Cases - Log Scale")+
scale_y_log10(labels = si_vec, breaks = c(0,5,10,50,100,250,500,1000,2500,5000, 10000,25000,50000,100000))
runApp()
au_du$state
au_dt$state
au_dt$state %>% unique ()
df_new$state %>% unique ()
df_new <- df %>%
filter(!is.nan(!!measure_s), !!measure_s>=0, !is.na(!!measure_s))
df_end <- df_new %>%
group_by(state) %>%
filter(Date == max(Date-1)) %>%
ungroup()
df_new %>%
ggplot(aes(x = passed_days, y = !!measure_s, group = state, color = state))+
geom_line()+
geom_point(size = 0.4)+
geom_text_repel(data = df_end, aes(label = state), size = 4, min.segment.length = 0)+
scale_x_continuous(limits = c(0, 50)) +
theme(legend.position = "none",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 17))+
scale_colour_manual(values = au_state_color)+
labs (caption = str_c("\n","By: @behrooz_hm @yurisyt / Data: Tim Churches (UNSW) & John Hopkins University"),
x = "Days since the First Case Reported from each State") +
labs(title = str_c ("COVID-19 Cases @ ", Sys.time()," AEDT", "\n","(Y-axis is logged)"),
y = "Number of Reported Cases - Log Scale")+
scale_y_log10(labels = si_vec, breaks = c(0,5,10,50,100,250,500,1000,2500,5000, 10000,25000,50000,100000))
df_new [df_new$Date == max (df_new$Date)]
df_new [df_new$Date == max (df_new$Date),]
if(identical(m, "Cumulative Cases")){
measure_s <- sym("cumulative_cases")
}else{
measure_s <- sym("incident_cases")
}
df_new <- df %>%
mutate(`cases_per_capita` = !!measure_s/population*10000000) %>%
filter(!is.nan(`cases_per_capita`), !is.na(`cases_per_capita`), `cases_per_capita`>=0)
df_end <- df_new %>%
group_by(state) %>%
filter(Date == max(Date-1)) %>%
ungroup()
df_new %>%
ggplot(aes(x = passed_days, y = `cases_per_capita`, group = state, color = state))+
geom_line()+
geom_point(size = 0.4)+
geom_text_repel(data = df_end, aes(label = state), size = 4, min.segment.length = 0)+
scale_x_continuous(limits = c(0, 50)) +
theme(legend.position = "none",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 17))+
scale_colour_manual(values = au_state_color)+
labs (
#subtitle  = str_c("By: @behrooz_hm @yurisyt"),
caption = str_c("\n","By: @behrooz_hm @yurisyt / Data: Tim Churches (UNSW) & John Hopkins University"),
x = "Days since the First Case Reported from each State")+
labs(title = str_c ("Per Capita COVID-19 Cases @ ", Sys.time()," AEDT", "\n","(Y-axis is logged)"),
y = "Number of Reported Cases Per 10 Million of Population - Log Scale")+
scale_y_log10(labels = si_vec, breaks = c(0,5,10,50,100,250,500,1000,2500,5000, 10000,25000,50000,100000))
df_new %>%
ggplot(aes(x = passed_days, y = !!measure_s, group = state, color = state))+
geom_line()+
geom_point(size = 0.4)+
geom_text_repel(data = df_end, aes(label = state), size = 4, min.segment.length = 0)+
scale_x_continuous(limits = c(0, 50)) +
theme(legend.position = "none",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 17))+
scale_colour_manual(values = au_state_color)+
labs (caption = str_c("\n","By: @behrooz_hm @yurisyt / Data: Tim Churches (UNSW) & John Hopkins University"),
x = "Days since the First Case Reported from each State") +
labs(title = str_c ("COVID-19 Cases @ ", Sys.time()," AEDT", "\n","(Y-axis is logged)"),
y = "Number of Reported Cases - Log Scale")+
scale_y_log10(labels = si_vec, breaks = c(0,5,10,50,100,250,500,1000,2500,5000, 10000,25000,50000,100000))
measure_s <- sym("cumulative_cases")
if(identical(m, "Cumulative Cases")){
measure_s <- sym("cumulative_cases")
}else{
measure_s <- sym("incident_cases")
}
df_new <- df %>%
filter(!is.nan(!!measure_s), !!measure_s>=0, !is.na(!!measure_s))
df_end <- df_new %>%
group_by(state) %>%
filter(Date == max(Date-1)) %>%
ungroup()
df_new %>%
ggplot(aes(x = passed_days, y = !!measure_s, group = state, color = state))+
geom_line()+
geom_point(size = 0.4)+
geom_text_repel(data = df_end, aes(label = state), size = 4, min.segment.length = 0)+
scale_x_continuous(limits = c(0, 50)) +
theme(legend.position = "none",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 17))+
scale_colour_manual(values = au_state_color)+
labs (caption = str_c("\n","By: @behrooz_hm @yurisyt / Data: Tim Churches (UNSW) & John Hopkins University"),
x = "Days since the First Case Reported from each State") +
labs(title = str_c ("COVID-19 Cases @ ", Sys.time()," AEDT", "\n","(Y-axis is logged)"),
y = "Number of Reported Cases - Log Scale")+
scale_y_log10(labels = si_vec, breaks = c(0,5,10,50,100,250,500,1000,2500,5000, 10000,25000,50000,100000))
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("wbstats")
shiny::runApp()
install.packages("uuid")
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='behroozh',
token='823A33033F73A177F38BB8F0BA9B9786',
secret='<SECRET>')
rsconnect::setAccountInfo(name='behroozh',
token='823A33033F73A177F38BB8F0BA9B9786',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='behroozh',
token='823A33033F73A177F38BB8F0BA9B9786',
secret='<SECRET>')
shiny::runApp()
runApp()
runApp()
?strong
runApp()
runApp()
rsconnect::setAccountInfo(name='behroozh',
token='823A33033F73A177F38BB8F0BA9B9786',
secret='Nzzulxz0poQBb9+t+zYrQ+SNt1a0VmX5JhX1gfpm')
rsconnect::setAccountInfo(name='behroozh',
token='823A33033F73A177F38BB8F0BA9B9786',
secret='Nzzulxz0poQBb9+t+zYrQ+SNt1a0VmX5JhX1gfpm')
runApp()
runApp()
shiny::runApp()
View(wb_dt)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
install.packages("shinyWidgets")
runApp()
install.packages("shinyjs")
runApp()
install.packages("wbstats")
runApp()
install.packages("DT")
runApp()
install.packages("fmsb")
runApp()
install.packages("pkgload")
runApp()
library(shiny)
library(shinyWidgets)
library(shinyjs)
library(tidyverse)
library(scales)
library(data.table)
library(lubridate)
library(ggrepel)
library(xml2)
library(bit64)
library(RCurl)
library(httr)
library(readxl)
library(wbstats)
library(DT)
library(fmsb)
pkgload::load_all(path= "GAlogger/")
theme_set(theme_minimal())
source("R/0. load_data_jhu.R")
source("R/1. functions.R")
shiny::runApp()
install.packages("shinyjs")
runApp()
install.packages("fmsb")
runApp()
causes <- wb_dt <- fread("data/annual-number-of-deaths-by-cause.csv")
head (causes)
wb_dt <- fread("data/wb_data_2020-04-02.csv")
head (wb_dt)
head(dt_country)
causes <- wb_dt <- fread("data/annual-number-of-deaths-by-cause.csv") %>%
group_by(Entity) %>%
filter (Year == max (Year))
causes
dim (dt_country)
causes <- wb_dt <- fread("data/annual-number-of-deaths-by-cause.csv") %>%
group_by(Entity) %>%
filter (Year == max (Year)) %>%
mutate (country_region = Entity)
causes
rc_dictionary
region_country_list
wb_dt <- fread("data/wb_data_2020-04-02.csv") %>%
right_join(dt_country, by = c("Country" = "country_region"))  %>%
filter(confirmed_cases > 0) %>%
group_by(Country) %>%
mutate(first_day = min(Date), days = Date - first_day + 1) %>%
ungroup() %>%
mutate(active_cases = confirmed_cases - death_cases - recovered_cases) %>%
mutate_if(is.logical, as.numeric)
wb_dt
wb_dt <- fread("data/wb_data_2020-04-02.csv") %>%
right_join(dt_country, by = c("Country" = "country_region"))  %>%
filter(confirmed_cases > 0) %>%
group_by(Country) %>%
mutate(first_day = min(Date), days = Date - first_day + 1) %>%
ungroup() %>%
mutate(active_cases = confirmed_cases - death_cases - recovered_cases) %>%
mutate_if(is.logical, as.numeric) %>% left_join(causes)
wb_dt <- fread("data/wb_data_2020-04-02.csv") %>%
right_join(dt_country, by = c("Country" = "country_region"))  %>%
filter(confirmed_cases > 0) %>%
group_by(Country) %>%
mutate(first_day = min(Date), days = Date - first_day + 1) %>%
ungroup() %>%
mutate(active_cases = confirmed_cases - death_cases - recovered_cases) %>%
mutate_if(is.logical, as.numeric) %>% left_join(causes, by = "country_region")
wb_dt <- fread("data/wb_data_2020-04-02.csv") %>%
right_join(dt_country, by = c("Country" = "country_region"))  %>%
filter(confirmed_cases > 0) %>%
group_by(Country) %>%
mutate(first_day = min(Date), days = Date - first_day + 1) %>%
ungroup() %>%
mutate(active_cases = confirmed_cases - death_cases - recovered_cases) %>%
mutate_if(is.logical, as.numeric) %>% left_join(causes, by = c("Country" = "country_region"))
colnames(wb_dt)
head (wb_dt)
View (db_dt)
View (wb_dt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
wb_dt %>% filter (Country == "Italy") %>% View
runApp()
?contains
c
runApp()
runApp()
c = "Italy"
df1 <-  wb_dt %>%
rename("COVID19" = "death_cases") %>%
filter(Country %in% c, Date == max(Date)) %>%
select(Country, `Alpha-3 code`, population, contains("n deaths"), Date, `COVID19`) %>%
pivot_longer(cols = contains("death"), names_to = "Death Condition", values_to = "Value") %>%
mutate(value = si_vec(round(Value,0)),
#format(as.integer(Value), big.mark = ","),
`Death Condition` = str_remove(`Death Condition`, pattern = " \\(n deaths\\)"))
df1
rbind(df1 %>% filter(`Death Condition` == "COVID19"),
df1 %>% group_by(Country) %>% top_n(n = 12, wt = Value) %>% ungroup()) %>%
distinct()
df1
runApp()
df1 <-  wb_dt %>%
rename("COVID19 n deaths" = "death_cases") %>%
filter(Country %in% c, Date == max(Date)) %>%
select(Country, `Alpha-3 code`, population, contains("n deaths"), Date, `COVID19 n deaths`) %>%
pivot_longer(cols = contains("n deaths"), names_to = "Death Condition", values_to = "Value") %>%
mutate(value = si_vec(round(Value,0)),
#format(as.integer(Value), big.mark = ","),
`Death Condition` = str_remove(`Death Condition`, pattern = " \\(n deaths\\)"))
df1
df1 <-  wb_dt %>%
rename("COVID19 (n deaths)" = "death_cases") %>%
filter(Country %in% c, Date == max(Date)) %>%
select(Country, `Alpha-3 code`, population, contains("n deaths"), Date, `COVID19 (n deaths)`) %>%
pivot_longer(cols = contains("n deaths"), names_to = "Death Condition", values_to = "Value") %>%
mutate(value = si_vec(round(Value,0)),
#format(as.integer(Value), big.mark = ","),
`Death Condition` = str_remove(`Death Condition`, pattern = " \\(n deaths\\)"))
df1
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
plt <- df%>%
ggplot(aes(x = !!xvar, y = !!yvar, group = Country, color = Country)) +
geom_point()+
geom_path()+
geom_text_repel(data = dayzero_end_test %>% filter(Country %in% c), aes(label = Country), size = 5, min.segment.length = 0, segment.color = "grey80")+
scale_color_manual(values = country_color)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
scale_y_log10(label = si_vec, breaks = scale_breaks) +
labs(caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"))
runApp()
runApp()
runApp()
runApp()
runApp()
plt <- df%>%
ggplot(aes(x = !!xvar, y = !!yvar, group = Country, color = Country)) +
geom_point(size = .5)+
geom_path()+
geom_text_repel(data = dayzero_end_test %>% filter(Country %in% c), aes(label = Country), size = 5, min.segment.length = 0, segment.color = "grey80")+
scale_color_manual(values = country_color)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
scale_y_log10(label = si_vec, breaks = c(0.001,0.01,0.1,0.5,1,2,5,10,50,100,1000,5000,10000,50000,100000,500000,1000000)) +
labs(caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"))
runApp()
c <- c("Italy", "China")
xm <-  "Confirmed Cases"
runApp()
runApp()
runApp()
yvar
colnames(df)
df <-   dayzero_test %>%
filter(Country %in% c) %>%
left_join(country_test,  by = c("Country" = "country_region", "Date")) %>%
group_by(Country) %>%
filter(Date == last(Date)) %>%
ungroup()
df <-   df %>%  mutate(cases_per_test = confirmed_cases / `Cumulative total`)
yvar = cases_per_test
yvar = "cases_per_test"
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col() +
scale_color_manual(values = country_color)+
scale_y_continuous(label = si_vec) +
geom_text(aes(label = str_c("As of ", format(Date,"%m-%d"))), y =  max(df[yvar]) *0.1,hjust = 0, size =3)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
labs(x = "", y = ylabel,
caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"),
title = str_c(ylabel, " at the Latest Avaliable Date"))+
coord_flip()
ylabel <- "Confirmed Cases per Test"
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col() +
scale_color_manual(values = country_color)+
scale_y_continuous(label = si_vec) +
geom_text(aes(label = str_c("As of ", format(Date,"%m-%d"))), y =  max(df[yvar]) *0.1,hjust = 0, size =3)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
labs(x = "", y = ylabel,
caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"),
title = str_c(ylabel, " at the Latest Avaliable Date"))+
coord_flip()
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col()
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col() +
scale_color_manual(values = country_color)
Country
df
c
c
c = c("Italy","US")
source('~/Dropbox/COVID_19/R/1. functions.R', echo=TRUE)
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col() +
scale_color_manual(values = country_color)+
scale_y_continuous(label = si_vec) +
geom_text(aes(label = str_c("As of ", format(Date,"%m-%d"))), y =  max(df[yvar]) *0.1,hjust = 0, size =3)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
labs(x = "", y = ylabel,
caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"),
title = str_c(ylabel, " at the Latest Avaliable Date"))+
coord_flip()
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col() +
scale_color_manual(values = country_color)+
#  scale_y_continuous(label = si_vec) +
geom_text(aes(label = str_c("As of ", format(Date,"%m-%d"))), y =  max(df[yvar]) *0.1,hjust = 0, size =3)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
labs(x = "", y = ylabel,
caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"),
title = str_c(ylabel, " at the Latest Avaliable Date"))+
coord_flip()
runApp()
runApp()
runApp()
runApp()
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col() +
scale_color_manual(values = country_color)+
scale_y_continuous(label = si_vec) +
geom_text(aes(label = str_c("As of ", format(Date,"%m-%d"))), y =  max(df$yvar) *0.1,hjust = 0, size =4)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
labs(x = "", y = ylabel,
caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"),
title = str_c(ylabel, " at the Latest Avaliable Date"))+
coord_flip()
df <-   dayzero_test %>%
filter(Country %in% c) %>%
left_join(country_test,  by = c("Country" = "country_region", "Date")) %>%
group_by(Country) %>%
filter(Date == last(Date)) %>%
ungroup()
c
yvar
df %>%  mutate(cases_per_test = confirmed_cases / `Cumulative total`)
ylabel <- "Confirmed Cases per Test"
df %>%
ggplot(aes(x = fct_reorder(Country,!!yvar), y = !!yvar, group = Country, fill = Country)) +
geom_col() +
scale_color_manual(values = country_color)+
scale_y_continuous(label = si_vec) +
geom_text(aes(label = str_c("As of ", format(Date,"%m-%d"))), y =  max(df$yvar) *0.1,hjust = 0, size =4)+
theme(legend.position = "none",
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 13))+
labs(x = "", y = ylabel,
caption = str_c("By: @behrooz_hm @yurisyt (Monash University) / Data: Johns Hopkins University & Our World in Data"),
title = str_c(ylabel, " at the Latest Avaliable Date"))+
coord_flip()
?geom_text
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
